apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-gitops-for-ace
spec:
  params:
  - default: ""
    name: app-name
    type: string
  - default: ""
    name: app-type
    type: string
  - default: ""
    name: app-name
    type: string
  - default: /source
    name: source-dir
    type: string
  - default: ""
    name: subdir
    type: string
  - default: ""
    name: parentdir
    type: string
  - default: requirements.yaml
    name: yaml
    type: string
  - default: ""
    name: helm-url
    type: string
  - default: quay.io/ibmgaragecloud/ibmcloud-dev:v2.0.4
    name: tools-image
    type: string
  - default: 1-apps/instances
    name: app-path
    type: string
  - default: ace-app/config
    name: ace-path
    type: string
  - default: base
    name: base-path
    type: string
  - default: integrationServer
    name: integrationServer-path
    type: string
  - default: configuration
    name: config-path
    type: string
  - default: ""
    name: source-env
    type: string
  - default: ""
    name: destination-env
    type: string
  stepTemplate:
    name: ""
    resources: {}
    volumeMounts:
    - mountPath: $(params.source-dir)
      name: source
  steps:
  - name: gitops-clone
    env:
    - name: NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: HOME
      value: /home/devops
    - name: GIT_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: git-credentials
          optional: true
    - name: GIT_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: git-credentials
          optional: true
    - name: GIT_USERNAME_CD
      valueFrom:
        secretKeyRef:
          key: username
          name: gitops-cd-secret
          optional: true
    - name: GIT_PASSWORD_CD
      valueFrom:
        secretKeyRef:
          key: password
          name: gitops-cd-secret
          optional: true
    - name: GIT_PARENT_DIR
      valueFrom:
        configMapKeyRef:
          key: parentdir
          name: gitops-repo-ace
          optional: true
    - name: GIT_PROTOCOL
      valueFrom:
        configMapKeyRef:
          key: protocol
          name: gitops-repo-ace
          optional: true
    - name: GIT_HOST
      valueFrom:
        configMapKeyRef:
          key: host
          name: gitops-repo-ace
          optional: true
    - name: GIT_ORG
      valueFrom:
        configMapKeyRef:
          key: org
          name: gitops-repo-ace
          optional: true
    - name: GIT_REPO
      valueFrom:
        configMapKeyRef:
          key: repo
          name: gitops-repo-ace
          optional: true
    - name: GIT_BRANCH
      valueFrom:
        configMapKeyRef:
          key: branch
          name: gitops-repo-ace
          optional: true
    image: $(params.tools-image)

    resources: {}
    script: |
      #!/usr/bin/env bash
      set -ex

      BRANCH_CMD=""
      if [[ -n ${GIT_BRANCH} ]]; then
        BRANCH_CMD="-b ${GIT_BRANCH}"
      fi

      git config --global user.email "gitops@cloudnativetoolkit.dev"
      git config --global user.name "Cloud Native Toolkit Pipeline"

      GIT_USERNAME="$(echo -e "${GIT_USERNAME}" | tr -d '[:space:]')"
      GIT_PASSWORD="$(echo -e "${GIT_PASSWORD}" | tr -d '[:space:]')"

      echo "Cloning the corresponding repository"
      # clone repo
      GIT_URL="${GIT_PROTOCOL}://${GIT_USERNAME}:${GIT_PASSWORD}@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"
      git clone ${BRANCH_CMD} ${GIT_URL} update_gitops_repo

    workingDir: $(params.source-dir)
  - name: copy-to-next-env
    image: $(params.tools-image)
    workingDir: $(params.source-dir)
    script: |
      set -x

      cd update_gitops_repo
      source_directory_integration_server="$(params.app-path)/namespace-$(params.source-env)/$(params.ace-path)/$(params.source-env)/$(params.base-path)/$(params.integrationServer-path)"
      destination_directory_integration_server="$(params.app-path)/namespace-$(params.destination-env)/$(params.ace-path)/$(params.destination-env)/$(params.base-path)/$(params.integrationServer-path)"

      source_directory_config="$(params.app-path)/namespace-$(params.source-env)/$(params.ace-path)/$(params.source-env)/$(params.base-path)/$(params.config-path)"
      destination_directory_config="$(params.app-path)/namespace-$(params.destination-env)/$(params.ace-path)/$(params.destination-env)/$(params.base-path)/$(params.config-path)"

      if [ "$(ls -A ${destination_directory_integration_server}/*.yaml)" ]; then
        rm ${destination_directory_integration_server}/*.yaml
      fi

      cp -r ${source_directory_integration_server}/. ${destination_directory_integration_server}

      if [ "$(ls -A ${destination_directory_config}/*.yaml)" ]; then
        rm ${destination_directory_config}/*.yaml
      fi

      cp -r ${source_directory_config}/. ${destination_directory_config}
  - name: gitops-push
    image: $(params.tools-image)
    workingDir: $(params.source-dir)
    env:
    - name: GIT_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: git-credentials
          optional: true
    - name: GIT_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: git-credentials
          optional: true
    - name: GIT_PROTOCOL
      valueFrom:
        configMapKeyRef:
          key: protocol
          name: gitops-repo-ace
          optional: true
    - name: GIT_HOST
      valueFrom:
        configMapKeyRef:
          key: host
          name: gitops-repo-ace
          optional: true
    - name: GIT_ORG
      valueFrom:
        configMapKeyRef:
          key: org
          name: gitops-repo-ace
          optional: true
    - name: GIT_REPO
      valueFrom:
        configMapKeyRef:
          key: repo
          name: gitops-repo-ace
          optional: true
    - name: GIT_BRANCH
      valueFrom:
        configMapKeyRef:
          key: branch
          name: gitops-repo-ace
          optional: true
    script: |
      set -ex

      GIT_URL="${GIT_PROTOCOL}://${GIT_USERNAME}:${GIT_PASSWORD}@${GIT_HOST}/${GIT_ORG}/${GIT_REPO}"

      cd update_gitops_repo

      git_version="$(git rev-parse --short HEAD)"
      git checkout -b cntk-ci-pipeline-${git_version}

      if [[ $(git status -s | wc -l) -eq 0 ]]; then
        echo "No changes"
        exit 0
      fi

      git config --global user.email "gitops@cloudnativetoolkit.dev"
      git config --global user.name "Cloud Native Toolkit Pipeline"

      git add .
      git commit -m "Cloudnative toolkit commit" --amend --no-edit --signoff
      git remote rm origin

      git remote add origin ${GIT_URL} > /dev/null 2>&1
      git push origin cntk-ci-pipeline-${git_version}

      GIT_PUSH_URL="${GIT_PROTOCOL}://api.github.com/repos/${GIT_ORG}/${GIT_REPO}/pulls"
      curl -u ${GIT_USERNAME}:${GIT_PASSWORD} -d '{"title":"PR to promote to $(params.destination-env) environment","base":"'${GIT_BRANCH}'", "head":"'${GIT_ORG}':cntk-ci-pipeline-'${git_version}'"}' ${GIT_PUSH_URL}

  volumes:
  - emptyDir: {}
    name: source
